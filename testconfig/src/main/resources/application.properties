server.port=8090
#名字
spring.cloud.config.server.default-application-name=config-server
# 配置仓库路径
#spring.cloud.config.server.git.uri=file://${user.home}/config-repo
spring.cloud.config.server.git.uri=https://github.com/hfxing123/hfx
#git账号密码（如果git公开则不需要）
#spring.cloud.config.server.git.username
#spring.cloud.config.server.git.password

#可以通过代理来获取数据配置（多个存储库可以单独设置）
#代理的主机
#spring.cloud.config.server.git.https.host=my-proxy.host.io
#端口
#spring.cloud.config.server.git.https.port='3128'
#用户名
#spring.cloud.config.server.git.https.username=myproxyusername
#密码
#spring.cloud.config.server.git.https.password=myproxypassword
#不通过该代理访问的主机 TODO
#spring.cloud.config.server.git.https.nonProxyHosts=example.com

#是否强制获取（多个存储库可以单独设置）
#spring.cloud.config.server.git.force-pull: true

#强制删除未跟踪的分支，否则有可能在远端删了一个版本却依然在本地读取
#spring.cloud.config.server.git.deleteUntrackedBranches

#git刷新频率，以秒为单位，如果设置为0，则每次获取配置都去请求
#spring.cloud.config.server.git.refreshRate=100

#从远程服务器同步回来的数据放置目录，否则会放在系统的临时目录，可能会被清除，比如linux系统的在/tmp/config-repo-<randomid>，windows系统的在C:\Users\用户名\AppData\Local\Temp\config-repo-3609059345908935990
#spring.cloud.config.server.git.basedir=
#spring.cloud.config.server.svn.basedir=

# 配置仓库路径(git的话是哪个文件夹)
#spring.cloud.config.server.git.search-paths=config-client,dev,temp*

# dev 开发环境配置文件 |  test 测试环境  |  pro 正式环境
# 和git里的文件名对应
spring.cloud.config.profile=dev

#配置服务器（Config Server）默认情况下会对 Git 服务器的 SSL 证书进行验证。可以通过设置为 true 来禁止验证。默认值为 false
#spring.cloud.config.server.git.skipSslValidation：

#可以使用本地文件不用git,searchLocations默认值和springboot相同 [classpath:/, classpath:/config, file:./, file:./config] ，application.properties不会暴露给客户端，不推荐使用这个，一般入门的时候才使用,{lable}没用
#spring.profiles.active=native
#spring.cloud.config.server.native.searchLocations=file:///${user.home}/config-repo
#可以设置禁止自动添加{label}，否则会自动添加（一般不用本地的，所以这个没必要改）
#spring.cloud.config.server.native.addLabelLocations=false

#spring.cloud.config.server.git.timeout 获取配置服务器超时时间，以秒为单位
# 可以使用占位符，比如url里面 https://github.com/{application}，如果路径有斜杠则使用(_)来替换，包括()

#可以强制覆盖客户端的foo，${}使用\，如\${app.foo:bar}
#spring:
#    cloud:
#        config:
#            server:
#                overrides:
#                    foo: bar

#可以通过spring.cloud.config.overrideNone=true 来设置不覆盖客户端的非系统属性，例如命令行的java -jar --xxxx.xxx test.jar=value，如果不设置为true，从服务端的属性会覆盖掉命令行的数据，默认为false
#spring.cloud.config.overrideSystemProperties=true 覆盖系统属性，默认为true

#匹配模式和多个存储库，cloneOnStart 可以在启动时不去判断有没有，需要的时候才去获取
#spring.cloud.config.server.git.
#repos:
#    simple: https://github.com/simple/config-repo
#    special:
#        pattern: special*/dev*,*special*/dev*
#        cloneOnStart: false
#        uri: https://github.com/special/config-repo
#    local:
#        pattern: local*
#        uri: file:/home/configsvc/config-repo

#可以使用复合环境多个库来源库，会按顺序覆盖上一个库的属性，有可以从不同类型的存储设备获取配置数据，可以按顺序来设置，数字越少越先读取，使用的时候才去看，必须使用相同的lable，否则整个请求都失败（不太常用但是记录下来）
#spring:
#    profiles:
#        active: composite
#    cloud:
#        config:
#            server:
#                composite:
#                    -
#                        type: svn
#                        uri: file:///path/to/svn/repo
#                    -
#                        type: git
#                        uri: file:///path/to/rex/git/repo
#                    -
#                        type: git
#                        uri: file:///path/to/walter/git/repo

#备注（但是一般不用）
#可以使用各种登录验证如ssh
#可以使用Vault 当数据来源（稍微看，但不作详细记录，Spring Cloud config 默认是git ）
#所有应用程序共享的配置，可以在里面设置默认值 application* (application.properties, application.yml, application-*.properties, and so on)
#_property_overrides[property overrides] 也可以设置全局设置，允许本地应用覆盖配置
#使用native的，应该使用不属于服务器本身的配置的显式搜索位置，不然application*不会传到客户端，因为本来就属于服务器的一部分
#可以使用jdbc作为后端，需要配置好配置，然后创建一个表PROPERTIES（本来想写还是不写了，不常用不记录）
#自带了监控，可以定义或者关闭spring.cloud.config.server.health.enabled=false，会被缓存5分钟，可以设置health.config.time-to-live
#可以设置安全，默认账号user，密码随机，可以设置spring.security.user.password来设置密码，需要下载对应的JCE（略过配置）
#可以使用替代格式，在后面添加后缀 (".yml", ".yaml" or ".properties")，一般不用
#提供纯文本 /{name}/{profile}/{label}/{path} ，path是文件名，但只会返回匹配的第一个，/*/development/*/logback.xml 可以匹配logback-development.xml，优先于logback.xml，不想提供label的话可以使用/foo/default/nginx.conf?useDefaultLabel
#一般spring cloud config作为单独项目独立运行，实际上可以整合到同一个项目里面（略）
#可以推送通知，比如spring cloud bus，可以加入spring-cloud-config-monitor 来监控和触发通知 TODO

#整合Eureka直接使用服务发现，而不直接用IP
eureka.client.healthcheck.enabled=true
eureka.client.serviceUrl.defaultZone=http://172.16.0.100:8761/eureka/
spring.application.name=testconfig

#使用spring cloud bus来刷新客户端的配置
spring.rabbitmq.host=172.16.0.100
spring.rabbitmq.post=5672
spring.rabbitmq.username=admin
spring.rabbitmq.password=admin

spring.cloud.bus.enabled=true
spring.cloud.bus.trace.enabled=true
management.endpoints.web.exposure.include=bus-refresh



#配置中心服务端健康监测器
#spring.cloud.config.server.health.repositories.check.name=app
#spring.cloud.config.server.health.repositories.check.label=master
#spring.cloud.config.server.health.repositories.check.profiles=prod